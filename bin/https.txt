import axios, { type AxiosRequestConfig, type AxiosRequestHeaders, type AxiosResponse } from 'axios';
<ui@1>
<route@1>

export interface AppRequestConfig extends AxiosRequestConfig {
  /**
   * 返回原数据
   * 默认不返回
   * 若设置为true，则返回原数据，不做任何处理
   * 若设置为false，则返回data字段数据
   */
  returnResponse?: boolean;
  /**
   * 指定接口无需token
   * 默认传递token
   * 若设置为true，则不传递token
   */
  noToken?: boolean;
  /**
   * 200 下是否显示提示消息
   * 默认不显示消息，除非显示设置为true
   */
  showOKMsg?: boolean;
  /**
   * !200 下是否显示提示消息
   * 默认 显示消息，除非显示设置为false关闭，其他一律显示
   */
  showERRMsg?: boolean;
  /**
   * 成功状态码
   * 默认 200
   */
  successCode?: number;
}
export interface ResData<T = any> {
  code: number;
  data: T;
  msg: string;
}

interface AppInternalAxiosRequestConfig extends AppRequestConfig {
  headers: AxiosRequestHeaders;
}

interface AppAxiosResponse<T = any> extends AxiosResponse<T> {
  config: AppInternalAxiosRequestConfig;
}

const https = axios.create({
  baseURL: import.meta.env.VITE_APP_API,
  timeout: 20000,
});

https.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded; charset=UTF-8';


// 添加请求拦截器
https.interceptors.request.use(
  (config: AppInternalAxiosRequestConfig) => {
    // 处理token
    if (!config.noToken) {
      if (config.method == 'get') {
        if (config.params == undefined) config.params = {};
        if (localStorage.token) config.params.token = localStorage.getItem('token');
      }
      if (config.method == 'post') {
        if (config.data == undefined) config.data = {};
        if (localStorage.token) config.data.token = localStorage.getItem('token');
      }
    }
    return config;
  },
  error => {
    // 对请求错误做些什么
    return Promise.reject(error);
  },
);

// 添加响应拦截器
https.interceptors.response.use(
  (response: AppAxiosResponse<ResData>) => {
    // response.data 为接口直接返回的信息，这个信息不包含http状态信息
    const { config, data: resData } = response;
    const { code, data, msg } = resData;
    // 返回信息类型不是json，或者code字段不存在，直接返回原始数据，忽略一切自定义参数，如returnResponse、showError等
    if (response.config.responseType != 'json' || !resData.hasOwnProperty('code')) return resData;
    // 如果code为400， 直接跳转到登录
    if (code == 400) return <route@2>;
    if (code == config.successCode && config.showOKMsg) <ui@3>;
    if (code != config.successCode) {
      // 默认显示错误信息，除非显示设置为false
      if (config.showERRMsg !== true) <ui@2>;
      return Promise.reject(new Error(msg, { cause: resData }));
    }
    // 根据returnResponse返回信息
    return config.returnResponse ? resData : data;
  },
  error => {
    return Promise.reject(error);
  },
);

type ResponseTypeMap = {
  blob: Blob;
  arraybuffer: ArrayBuffer;
  document: Document;
  formdata: FormData;
  stream: ReadableStream;
  text: Text;
};
type ExtractResponseType<U> = U extends { responseType: keyof ResponseTypeMap } ? ResponseTypeMap[U['responseType']]: never;
type TypeT<T, U> = ExtractResponseType<U> extends never ? T : ExtractResponseType<U>;
type ResT<T, U> = U extends { returnResponse: true } ? ResData<TypeT<T, U>> : TypeT<T, U>;

export function Get<U, T = any>(url: string, params: Record<string, any> = {}, config: AppRequestConfig = {}) {
  config.params = params;
  return https.request<null, ResT<T, U>>({ method: 'get', url, ...config });
}

export function Post<U, T = any>(url: string, data: Record<string, any> = {}, config: AppRequestConfig = {}) {
  config.data = data;
  return https.request<null, ResT<T, U>>({ method: 'post', url, ...config });
}
